buildscript {
    ext {
        grpc_version = '1.53.0'
        protoc_version = '3.21.7'
        netty_version = '4.1.93.Final'
        prometheus_version = '0.16.0'
        snakeyaml_version = '2.0'
        commons_cli_version = '1.5.0'
        torchserve_sdk_version = '0.0.5'
        lmax_disruptor_version = '3.4.4'
        slf4j_log4j_version = '2.20.0'
        groovy_version = '3.0.17'
        testng_version = '7.7.1'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

sourceSets {
    main {
        proto {
            srcDir 'src/main/resources/proto'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

dependencies {
    implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
    implementation "io.grpc:grpc-protobuf:${grpc_version}"
    implementation "io.grpc:grpc-stub:${grpc_version}"
    implementation "io.grpc:protoc-gen-grpc-java:${grpc_version}"
    implementation "io.netty:netty-all:${netty_version}"
    implementation "io.prometheus:simpleclient:${prometheus_version}"
    implementation "io.prometheus:simpleclient_servlet:${prometheus_version}"
    implementation "org.yaml:snakeyaml:${snakeyaml_version}"
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.pytorch:torchserve-plugins-sdk:${torchserve_sdk_version}"
    implementation "com.lmax:disruptor:${lmax_disruptor_version}"
    implementation "org.apache.logging.log4j:log4j-core:${slf4j_log4j_version}"
    implementation "org.codehaus.groovy:groovy-all:${groovy_version}"
    implementation "com.google.protobuf:protobuf-java:${protoc_version}"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    
    testImplementation "org.testng:testng:${testng_version}"
}

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protoc_version}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/build/generated"
}

processResources.dependsOn('generateProto')
processTestResources.dependsOn('generateTestProto')
jar.dependsOn(':archive:jar')

apply from: file("${project.rootProject.projectDir}/tools/gradle/proto.gradle")
apply from: file("${project.rootProject.projectDir}/tools/gradle/launcher.gradle")

jar {
    manifest {
        attributes 'Main-Class': 'org.pytorch.serve.ModelServer'
    }
    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }

    exclude "META-INF/maven/**"
    exclude "META-INF/INDEX.LIST"
    exclude "META-INF/MANIFEST*"
    exclude "META-INF//LICENSE*"
    exclude "META-INF//NOTICE*"
}

test {
    doFirst {
        systemProperty "tsConfigFile", 'src/test/resources/config.properties'
    }
    environment "METRICS_LOCATION","build/logs"
    environment "LOG_LOCATION","build/logs"
}
