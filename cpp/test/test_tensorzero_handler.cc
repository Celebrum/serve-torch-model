// Generated by Copilot: Testing TensorZero handler integration with TorchServe
#include "gtest/gtest.h"
#include "src/backends/handler/tensorzero_handler.hh"
#include "src/utils/logging.hh"

namespace torchserve
{
  namespace
  {

    class TensorZeroHandlerTest : public ::testing::Test
    {
    protected:
      void SetUp() override
      {
        handler_ = std::make_unique<TensorZeroHandler>();
      }

      std::unique_ptr<TensorZeroHandler> handler_;
    };

    TEST_F(TensorZeroHandlerTest, InitializeWithInvalidPath)
    {
      EXPECT_THROW(handler_->initialize("invalid/path/model.tz"), std::runtime_error);
    }

    TEST_F(TensorZeroHandlerTest, PreprocessWithEmptyInput)
    {
      RequestContext context;
      EXPECT_THROW(handler_->preprocess(context), std::runtime_error);
    }

    TEST_F(TensorZeroHandlerTest, InferenceWithoutInitialization)
    {
      RequestContext context;
      ResponseContext response;
      auto error = handler_->inference(context, response);
      EXPECT_EQ(error, "Model not initialized");
    }

    TEST_F(TensorZeroHandlerTest, PostprocessBasicOperation)
    {
      ResponseContext response;
      EXPECT_NO_THROW(handler_->postprocess(response));
    }

  } // namespace
} // namespace torchserve